# Cline Development Rules for CapitalSure Construction OS

## Core Development Principles

### Design System Standards
- **Mobile-First Approach**: All components must be designed for mobile devices first, then enhanced for desktop
- **Touch Targets**: Minimum 44px touch targets for all interactive elements (56px preferred for construction gloves)
- **High Contrast**: Ensure 4.5:1 contrast ratio minimum, 7:1 for critical construction safety elements
- **Typography**: Use Inter font with optimized scale for construction industry legibility

### Color System
- **Primary Blue**: #2563EB (construction trust and professionalism)
- **Safety Orange**: #EA580C (warnings, safety alerts, urgent actions)
- **Success Green**: #059669 (completed tasks, safety compliance)
- **Error Red**: #DC2626 (critical issues, safety violations)
- **Neutral Grays**: #F8FAFC to #0F172A (backgrounds, text, borders)

### Grid System
- **Desktop**: 1537px max-width with 16-column layout
- **Tablet**: 1200px max-width with 12-column layout
- **Mobile**: Fluid width with 4-column layout
- **Gutters**: 24px desktop, 16px mobile

### Component Standards
- **Buttons**: Minimum 44px height, 6px border radius, subtle shadows on hover
- **Cards**: 8px border radius, 24px padding, elevation shadows
- **Forms**: 44px input height, proper focus states, error handling
- **Navigation**: Collapsible sidebar (280px â†’ 64px), mobile bottom tabs

### Performance Requirements
- **Core Web Vitals**: LCP < 2.5s, FID < 100ms, CLS < 0.1
- **Progressive Loading**: Optimize for construction site mobile networks
- **Offline Support**: Critical features must work offline
- **PWA Compliance**: Service workers for construction field work

### Accessibility Standards
- **WCAG 2.1 AA Compliance**: Mandatory for all components
- **Screen Reader Support**: Proper semantic markup and ARIA labels
- **Keyboard Navigation**: All functionality accessible via keyboard
- **Voice Input**: Support for hands-free operation in construction environments

### File Structure Standards
- **Components**: Group by feature in `/components/construction/`
- **Utilities**: Construction-specific utilities in `/lib/construction/`
- **Types**: TypeScript interfaces for construction data models
- **Styles**: Tailwind CSS with construction-specific utilities

### Code Quality Standards
- **TypeScript**: Strict mode enabled, proper type definitions
- **ESLint**: Construction-specific linting rules
- **Testing**: Unit tests for critical construction workflows
- **Documentation**: JSDoc comments for all public APIs

### Construction Industry Specific Requirements
- **Safety First**: All safety-related features must be prominently displayed
- **Photo Documentation**: Automatic compression and metadata tagging
- **Quality Control**: Checklist interfaces with progress tracking
- **Weather Integration**: Weather-aware UI adjustments
- **Offline Capability**: Essential for construction sites with poor connectivity

## Implementation Guidelines

### Component Development
1. Start with mobile design and touch optimization
2. Implement proper loading states and error handling
3. Add hover states with subtle shadow elevation
4. Ensure proper focus states for accessibility
5. Test with construction-specific user scenarios

### Styling Approach
- Use Tailwind CSS utility classes
- Create construction-specific component classes
- Implement CSS custom properties for theme consistency
- Use CSS Grid and Flexbox for responsive layouts

### Performance Optimization
- Implement lazy loading for non-critical components
- Use Next.js Image optimization for construction photos
- Minimize bundle size with dynamic imports
- Cache construction data for offline access

### Testing Requirements
- Unit tests for utility functions
- Integration tests for critical workflows
- Visual regression testing for UI components
- Performance testing for mobile devices
- Accessibility testing with screen readers

## Review Checklist

Before committing code, ensure:
- [ ] Mobile-first design implemented
- [ ] Touch targets meet 44px minimum
- [ ] Colors meet contrast requirements
- [ ] Typography follows Inter font scale
- [ ] Components are accessible
- [ ] Performance requirements met
- [ ] Construction-specific features tested
- [ ] Offline functionality works
- [ ] Documentation updated

## Architecture Decisions

### State Management
- Use React Context for global construction project state
- Implement optimistic updates for better UX
- Cache critical data locally for offline access

### Data Fetching
- Use React Query for server state management
- Implement proper error boundaries
- Add retry logic for network failures

### Routing
- Use Next.js App Router for better performance
- Implement proper loading states
- Add breadcrumb navigation for complex workflows

### Security
- Implement proper authentication for construction teams
- Add role-based access control
- Encrypt sensitive construction data
- Regular security audits for construction industry compliance

## Construction Industry Considerations

### User Types
- **Field Workers**: Need large touch targets, high contrast, offline capability
- **Project Managers**: Require detailed dashboards, reporting tools
- **Safety Officers**: Need quick access to safety checklists, incident reporting
- **Contractors**: Require scheduling tools, resource management

### Environmental Factors
- **Outdoor Usage**: High contrast colors, readable in sunlight
- **Harsh Conditions**: Durable UI that works with gloves
- **Poor Connectivity**: Offline-first design approach
- **Multiple Devices**: Responsive design for phones, tablets, desktops

This rules file ensures consistent, high-quality development that meets the unique needs of the construction industry while maintaining modern web standards and accessibility requirements.